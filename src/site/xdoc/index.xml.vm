<?xml version="1.0" encoding="UTF-8"?>
<document
  xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>${project.name}</title>
  </properties>

  <body>
    <subsection name="${project.name}">
      <p>
        The <b>${project.name}</b> package implements a system for
        efficiently accessing packed record values. It provides a
        simple schema language for defining types and can produce
        efficient "flyweight" <tt>ByteBuffer</tt>-backed record types
        in Java.
      </p>
    </subsection>
    <subsection name="Examples">
      <h4>OpenGL Vertices</h4>
      <p>
        A definition for a vertex type:
      </p>
      <pre>
(record Vertex [
  (field position [vector [float 32] 3])
  (field normal   [vector [float 16] 3])
  (field uv       [vector [float 16] 2])
  (field tangent  [vector [float 16] 4])
  (padding-octets 2)
])
      </pre>
      <p>
        Assuming a <tt>ByteBuffer</tt> <tt>b</tt> containing a mapped region
        of memory on the GPU with space for <tt>100</tt> vertices:
      </p>
      <pre><![CDATA[
final JPRACursor1DType<VertexType> c =
  JPRACursor1DByteBufferedUnchecked.newCursor(
    b, VertexByteBuffered::newValueWithOffset);

final VertexType v = c.getElementView();
final Vector3FType p = c.getPositionWritable();
final Vector3FType n = c.getNormalWritable();
final Vector2DType u = c.getUVWritable();
final Vector4DType t = c.getTangentWritable();

for (int index = 0; index < 100; ++index) {
  c.setElementIndex(index);

  p.set3F(...);
  n.set3F(...);
  u.set2F(...);
  t.set4F(...);
}
]]>
      </pre>
      <h4>OpenGL Textures</h4>
      <p>
        A definition for an RGB565 format pixel:
      </p>
      <pre>
(packed OpenGL565 [
  (field r [integer unsigned-normalized 5])
  (field g [integer unsigned-normalized 6])
  (field b [integer unsigned-normalized 5])
])
      </pre>
      <p>
        Assuming a <tt>ByteBuffer</tt> <tt>b</tt> containing data
        for a 256x256 RGB565 texture:
      </p>
      <pre><![CDATA[
final JPRACursor2DType<OpenGL565Type> c =
  JPRACursor2DByteBufferedUnchecked.newCursor(
    b, OpenGL565ByteBuffered::newValueWithOffset);

final OpenGL565Type v = c.getElementView();

for (int y = 0; y < 256; ++y) {
  for (int x = 0; x < 256; ++x) {
    c.setElementPosition(x, y);
    v.set(x / 256.0, y / 256.0, 1.0);
  }
}
]]>
      </pre>
    </subsection>
    <subsection name="Features">
      <ul>
        <li>Generate <tt>ByteBuffer</tt>-backed record types in Java, using a cursor abstraction for allocation-free access to large off-heap arrays.</li>
        <li>Simple command-line frontend for checking schemas and producing Java sources.</li>
        <li>Maven plugin for producing Java sources during Maven builds.</li>
        <li>ISC license.</li>
      </ul>
    </subsection>
  </body>

</document>
